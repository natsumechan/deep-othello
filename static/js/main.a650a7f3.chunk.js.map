{"version":3,"sources":["setting.ts","index.tsx"],"names":["Setting","LENGTH","Square","className","onClick","props","this","value","React","Component","Board","i","x","y","Math","floor","squares","content","j","push","renderSquare","items","Content","Game","tbl","Array","fill","state","history","xIsNext","stepNumber","slice","current","length","_","reverseStone","canPlaceStone","forEach","coord","ny","nx","setState","concat","step","status","score","winner","searchPlace","cntWhite","flat","filter","cntBlack","calculateWinner","moves","map","move","desc","jumpTo","handleClick","reverseStones","console","log","opponentStones","myStones","dy","dx","tmpStones","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a650a7f3.chunk.js","sourcesContent":["export class Setting{\n  // 盤の列数（行数）\n  public static LENGTH: number = 8;\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as _ from \"lodash\"\nimport {Setting} from \"./setting\";\n\ntype SquareProps = {\n    value: string | null;\n    onClick: () => void;\n};\n\n\nclass Square extends React.Component<SquareProps> {\n    render() {\n        return (\n            <button className=\"square\" onClick={() => this.props.onClick()}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\ntype SquareType = null | \"●\" | \"○\"\n\ntype BoardProps = {\n    squares: Array<Array<SquareType>>;\n    onClick: (i: number) => void;\n};\n\nclass Board extends React.Component<BoardProps> {\n    renderSquare(i: number) {\n        // 二次元配列に変換\n        const x = i % Setting.LENGTH\n        const y = Math.floor(i / Setting.LENGTH)\n        return (\n            <Square\n                value={this.props.squares[y][x]}\n                onClick={() => this.props.onClick(i)}\n            />\n        );\n    }\n\n    Content(i: number) {\n        let content = []\n        for (let j = i; j < i + Setting.LENGTH; j++) {\n            content.push(this.renderSquare(j))\n        }\n        return content;\n    }\n\n    render() {\n        let items: Array<JSX.Element> = [];\n        for (let i = 0; i < Setting.LENGTH ** 2; i = i + Setting.LENGTH) {\n            items.push(<div className=\"board-row\" key={i}>{this.Content(i)}</div>);\n        }\n        return (\n            <div>\n                {items}\n            </div>);\n    }\n}\n\ntype HistoryData = {\n    squares: Array<Array<SquareType>>;\n};\n\ntype GameState = {\n    history: HistoryData[];\n    xIsNext: boolean;\n    stepNumber: number;\n};\n\nclass Game extends React.Component<{}, GameState> {\n    constructor(props: {}) {\n        super(props);\n        let tbl = Array(Setting.LENGTH);\n        for (let y = 0; y < Setting.LENGTH; y++) {\n            tbl[y] = Array(Setting.LENGTH).fill(null)\n        }\n        //盤面初期化\n        tbl[3][3] = \"○\"\n        tbl[3][4] = \"●\"\n        tbl[4][3] = \"●\"\n        tbl[4][4] = \"○\"\n        this.state = {\n            history: [\n                {squares: tbl}\n            ],\n            xIsNext: true, // trueは●番\n            stepNumber: 0,\n        };\n    }\n\n    handleClick(i: number) {\n        const x = i % Setting.LENGTH\n        const y = Math.floor(i / Setting.LENGTH)\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        // const squares = current.squares.slice()\n        const squares = _.cloneDeep(current.squares)\n        const reverseStone = canPlaceStone(squares, x, y, this.state.xIsNext)\n        if (reverseStone.length === 0 || squares[y][x]) {\n            return;\n        }\n        // 石をおくところ\n        squares[y][x] = this.state.xIsNext ? \"●\" : \"○\";\n        reverseStone.forEach((coord: any) => {\n            const [ny, nx] = coord;\n            squares[ny][nx] = this.state.xIsNext ? \"●\" : \"○\";\n        });\n        this.setState(\n            {\n                history: history.concat([\n                    {\n                        squares: squares,\n                    }\n                ]),\n                xIsNext: !this.state.xIsNext,\n                stepNumber: history.length,\n            }\n        )\n\n    }\n\n    jumpTo(step: number) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0,\n        });\n    }\n\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares, this.state.xIsNext);\n        const moves = history.map((step, move) => {\n            const desc = move ? \" Go to move #\" + move : \"Go to game start\"\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            )\n        })\n        // 勝者が決まっていない時は、おける状態かチェック\n        if (!winner && !searchPlace(current.squares, this.state.xIsNext)) {\n            this.setState(\n                {\n                    history: history.concat([\n                        {\n                            squares: current.squares,\n                        }\n                    ]),\n                    xIsNext: !this.state.xIsNext,\n                    stepNumber: history.length,\n                }\n            )\n        }\n        let status;\n        if (winner) {\n            status = \"Winner :\" + winner;\n        } else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"●\" : \"○\");\n        }\n        let score;\n        let cntWhite = current.squares.flat().filter((x) => {\n            return x === \"○\"\n        }).length;\n        let cntBlack = current.squares.flat().filter((x) => {\n            return x === \"●\"\n        }).length;\n        score = \"White :\" + cntWhite + \" Black :\" + cntBlack;\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <header className=\"App-header\">\n                        <h1 className=\"App-title\">Reversi</h1>\n                    </header>\n                    <div>{status}</div>\n                    <div>{score}</div>\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                    <div className=\"game-info\">\n                        <ol>{moves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game/>,\n    document.getElementById('root')\n);\n\nfunction canPlaceStone(squares: Array<Array<SquareType>>, x: number, y: number, xIsNext: Boolean) {\n    let reverseStones: any = [];\n    // y, xを動かしていく[y, x]\n    const moves = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]];\n    console.log(moves, \"moves\")\n    const opponentStones = !xIsNext ? \"●\" : \"○\";\n    const myStones = !xIsNext ? \"○\" : \"●\";\n    moves.forEach((move) => {\n        const [dy, dx] = move;\n        let tmpStones = [];\n        let ny = y;\n        let nx = x;\n        while (true) {\n            ny += dy;\n            nx += dx;\n            // console.log(dy, dx)\n            if (0 <= ny && ny < Setting.LENGTH && 0 <= nx && nx < Setting.LENGTH) {\n                console.log(ny, nx, squares[ny][nx])\n                if (squares[ny][nx] === opponentStones) {\n                    tmpStones.push([ny, nx])\n                } else if (squares[ny][nx] === myStones) {\n                    reverseStones = reverseStones.concat(tmpStones)\n                    break\n                } else if (!squares[ny][nx]) {\n                    break\n                }\n            } else {\n                break\n            }\n        }\n    });\n    // console.log(reverseStones)\n    return reverseStones\n}\n\nfunction searchPlace(squares: Array<Array<SquareType>>, xIsNext: boolean) {\n    // https://proglight.jimdofree.com/programs/vba/othello/\n    // 置けない時はパス\n    for (let y = 0; y < Setting.LENGTH; y++) {\n        for (let x = 0; x <= Setting.LENGTH - 1; x++) {\n            if (squares[y][x] === null && canPlaceStone(squares, x, y, xIsNext).length > 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction calculateWinner(squares: Array<Array<SquareType>>, xIsNext: boolean) {\n    // 両者とも全てのマスに置けないときに点数を計算\n    if (!searchPlace(squares, xIsNext) && !searchPlace(squares, !xIsNext)) {\n        let cntWhite = squares.flat().filter((x) => {\n            return x === \"○\"\n        }).length;\n        let cntBlack = squares.flat().filter((x) => {\n            return x === \"●\"\n        }).length;\n        let winner;\n        if (cntWhite > cntBlack) {\n            winner = \"White\";\n        } else if (cntWhite < cntBlack) {\n            winner = \"Black\";\n        } else {\n            winner = \"Even\";\n        }\n        return winner;\n    }\n    return null;\n}"],"sourceRoot":""}